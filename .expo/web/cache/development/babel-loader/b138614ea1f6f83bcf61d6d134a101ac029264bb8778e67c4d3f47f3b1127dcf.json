{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"onError\", \"useSuspense\"];\nvar _jsxFileName = \"D:\\\\Development\\\\React_nactive\\\\login_process\\\\frontend\\\\node_modules\\\\expo-sqlite\\\\build\\\\hooks.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { Asset } from 'expo-asset';\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport ExpoSQLite from './ExpoSQLite';\nimport { openDatabaseAsync } from './SQLiteDatabase';\nimport { createDatabasePath } from './pathUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SQLiteContext = createContext(null);\nexport function SQLiteProvider(_ref) {\n  var children = _ref.children,\n    onError = _ref.onError,\n    _ref$useSuspense = _ref.useSuspense,\n    useSuspense = _ref$useSuspense === void 0 ? false : _ref$useSuspense,\n    props = _objectWithoutProperties(_ref, _excluded);\n  if (onError != null && useSuspense) {\n    throw new Error('Cannot use `onError` with `useSuspense`, use error boundaries instead.');\n  }\n  if (useSuspense) {\n    return _jsxDEV(SQLiteProviderSuspense, _objectSpread(_objectSpread({}, props), {}, {\n      children: children\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  }\n  return _jsxDEV(SQLiteProviderNonSuspense, _objectSpread(_objectSpread({}, props), {}, {\n    onError: onError,\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }, this);\n}\nexport function useSQLiteContext() {\n  var context = useContext(SQLiteContext);\n  if (context == null) {\n    throw new Error('useSQLiteContext must be used within a <SQLiteProvider>');\n  }\n  return context;\n}\nvar databaseInstance = null;\nfunction SQLiteProviderSuspense(_ref2) {\n  var databaseName = _ref2.databaseName,\n    directory = _ref2.directory,\n    options = _ref2.options,\n    assetSource = _ref2.assetSource,\n    children = _ref2.children,\n    onInit = _ref2.onInit;\n  var databasePromise = getDatabaseAsync({\n    databaseName: databaseName,\n    directory: directory,\n    options: options,\n    assetSource: assetSource,\n    onInit: onInit\n  });\n  var database = use(databasePromise);\n  return _jsxDEV(SQLiteContext.Provider, {\n    value: database,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n}\nfunction SQLiteProviderNonSuspense(_ref3) {\n  var databaseName = _ref3.databaseName,\n    directory = _ref3.directory,\n    options = _ref3.options,\n    assetSource = _ref3.assetSource,\n    children = _ref3.children,\n    onInit = _ref3.onInit,\n    onError = _ref3.onError;\n  var databaseRef = useRef(null);\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  useEffect(function () {\n    function setup() {\n      return _setup.apply(this, arguments);\n    }\n    function _setup() {\n      _setup = _asyncToGenerator(function* () {\n        try {\n          var db = yield openDatabaseWithInitAsync({\n            databaseName: databaseName,\n            directory: directory,\n            options: options,\n            assetSource: assetSource,\n            onInit: onInit\n          });\n          databaseRef.current = db;\n          setLoading(false);\n        } catch (e) {\n          setError(e);\n        }\n      });\n      return _setup.apply(this, arguments);\n    }\n    function teardown(_x) {\n      return _teardown.apply(this, arguments);\n    }\n    function _teardown() {\n      _teardown = _asyncToGenerator(function* (db) {\n        try {\n          yield db == null ? void 0 : db.closeAsync();\n        } catch (e) {\n          setError(e);\n        }\n      });\n      return _teardown.apply(this, arguments);\n    }\n    setup();\n    return function () {\n      var db = databaseRef.current;\n      teardown(db);\n      databaseRef.current = null;\n      setLoading(true);\n    };\n  }, [databaseName, directory, options, onInit]);\n  if (error != null) {\n    var handler = onError != null ? onError : function (e) {\n      throw e;\n    };\n    handler(error);\n  }\n  if (loading || !databaseRef.current) {\n    return null;\n  }\n  return _jsxDEV(SQLiteContext.Provider, {\n    value: databaseRef.current,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 12\n  }, this);\n}\nfunction getDatabaseAsync(_ref4) {\n  var _databaseInstance, _databaseInstance2, _databaseInstance3, _databaseInstance4, _databaseInstance5, _databaseInstance6;\n  var databaseName = _ref4.databaseName,\n    directory = _ref4.directory,\n    options = _ref4.options,\n    assetSource = _ref4.assetSource,\n    onInit = _ref4.onInit;\n  if (((_databaseInstance = databaseInstance) == null ? void 0 : _databaseInstance.promise) != null && ((_databaseInstance2 = databaseInstance) == null ? void 0 : _databaseInstance2.databaseName) === databaseName && ((_databaseInstance3 = databaseInstance) == null ? void 0 : _databaseInstance3.directory) === directory && ((_databaseInstance4 = databaseInstance) == null ? void 0 : _databaseInstance4.options) === options && ((_databaseInstance5 = databaseInstance) == null ? void 0 : _databaseInstance5.onInit) === onInit) {\n    return databaseInstance.promise;\n  }\n  var promise;\n  if (((_databaseInstance6 = databaseInstance) == null ? void 0 : _databaseInstance6.promise) != null) {\n    promise = databaseInstance.promise.then(function (db) {\n      db.closeAsync();\n    }).then(function () {\n      return openDatabaseWithInitAsync({\n        databaseName: databaseName,\n        directory: directory,\n        options: options,\n        assetSource: assetSource,\n        onInit: onInit\n      });\n    });\n  } else {\n    promise = openDatabaseWithInitAsync({\n      databaseName: databaseName,\n      directory: directory,\n      options: options,\n      assetSource: assetSource,\n      onInit: onInit\n    });\n  }\n  databaseInstance = {\n    databaseName: databaseName,\n    directory: directory,\n    options: options,\n    onInit: onInit,\n    promise: promise\n  };\n  return promise;\n}\nfunction openDatabaseWithInitAsync(_x2) {\n  return _openDatabaseWithInitAsync.apply(this, arguments);\n}\nfunction _openDatabaseWithInitAsync() {\n  _openDatabaseWithInitAsync = _asyncToGenerator(function* (_ref5) {\n    var databaseName = _ref5.databaseName,\n      directory = _ref5.directory,\n      options = _ref5.options,\n      assetSource = _ref5.assetSource,\n      onInit = _ref5.onInit;\n    if (assetSource != null) {\n      yield importDatabaseFromAssetAsync(databaseName, assetSource, directory);\n    }\n    var database = yield openDatabaseAsync(databaseName, options, directory);\n    if (onInit != null) {\n      yield onInit(database);\n    }\n    return database;\n  });\n  return _openDatabaseWithInitAsync.apply(this, arguments);\n}\nexport function importDatabaseFromAssetAsync(_x3, _x4, _x5) {\n  return _importDatabaseFromAssetAsync.apply(this, arguments);\n}\nfunction _importDatabaseFromAssetAsync() {\n  _importDatabaseFromAssetAsync = _asyncToGenerator(function* (databaseName, assetSource, directory) {\n    var _assetSource$forceOve;\n    var asset = yield Asset.fromModule(assetSource.assetId).downloadAsync();\n    if (!asset.localUri) {\n      throw new Error(`Unable to get the localUri from asset ${assetSource.assetId}`);\n    }\n    var path = createDatabasePath(databaseName, directory);\n    yield ExpoSQLite.importAssetDatabaseAsync(path, asset.localUri, (_assetSource$forceOve = assetSource.forceOverwrite) != null ? _assetSource$forceOve : false);\n  });\n  return _importDatabaseFromAssetAsync.apply(this, arguments);\n}\nfunction use(promise) {\n  if (isReactUsePromise(promise)) {\n    if (promise.status === 'fulfilled') {\n      if (promise.value === undefined) {\n        throw new Error('[use] Unexpected undefined value from promise');\n      }\n      return promise.value;\n    } else if (promise.status === 'rejected') {\n      throw promise.reason;\n    } else if (promise.status === 'pending') {\n      throw promise;\n    }\n    throw new Error('[use] Promise is in an invalid state');\n  }\n  var suspensePromise = promise;\n  suspensePromise.status = 'pending';\n  suspensePromise.then(function (result) {\n    suspensePromise.status = 'fulfilled';\n    suspensePromise.value = result;\n  }, function (reason) {\n    suspensePromise.status = 'rejected';\n    suspensePromise.reason = reason;\n  });\n  throw suspensePromise;\n}\nfunction isReactUsePromise(promise) {\n  return typeof promise === 'object' && promise !== null && 'status' in promise;\n}","map":{"version":3,"names":["Asset","React","createContext","useContext","useEffect","useRef","useState","ExpoSQLite","openDatabaseAsync","createDatabasePath","jsxDEV","_jsxDEV","SQLiteContext","SQLiteProvider","_ref","children","onError","_ref$useSuspense","useSuspense","props","_objectWithoutProperties","_excluded","Error","SQLiteProviderSuspense","_objectSpread","fileName","_jsxFileName","lineNumber","columnNumber","SQLiteProviderNonSuspense","useSQLiteContext","context","databaseInstance","_ref2","databaseName","directory","options","assetSource","onInit","databasePromise","getDatabaseAsync","database","use","Provider","value","_ref3","databaseRef","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","setup","_setup","apply","arguments","_asyncToGenerator","db","openDatabaseWithInitAsync","current","e","teardown","_x","_teardown","closeAsync","handler","_ref4","_databaseInstance","_databaseInstance2","_databaseInstance3","_databaseInstance4","_databaseInstance5","_databaseInstance6","promise","then","_x2","_openDatabaseWithInitAsync","_ref5","importDatabaseFromAssetAsync","_x3","_x4","_x5","_importDatabaseFromAssetAsync","_assetSource$forceOve","asset","fromModule","assetId","downloadAsync","localUri","path","importAssetDatabaseAsync","forceOverwrite","isReactUsePromise","status","undefined","reason","suspensePromise","result"],"sources":["D:\\Development\\React_nactive\\login_process\\frontend\\node_modules\\expo-sqlite\\src\\hooks.tsx"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n\nimport ExpoSQLite from './ExpoSQLite';\nimport type { SQLiteOpenOptions } from './NativeDatabase';\nimport { openDatabaseAsync, type SQLiteDatabase } from './SQLiteDatabase';\nimport { createDatabasePath } from './pathUtils';\n\nexport interface SQLiteProviderAssetSource {\n  /**\n   * The asset ID returned from the `require()` call.\n   */\n  assetId: number;\n\n  /**\n   * Force overwrite the local database file even if it already exists.\n   * @default false\n   */\n  forceOverwrite?: boolean;\n}\n\nexport interface SQLiteProviderProps {\n  /**\n   * The name of the database file to open.\n   */\n  databaseName: string;\n\n  /**\n   * The directory where the database file is located.\n   * @default defaultDatabaseDirectory\n   */\n  directory?: string;\n\n  /**\n   * Open options.\n   */\n  options?: SQLiteOpenOptions;\n\n  /**\n   * Import a bundled database file from the specified asset module.\n   * @example\n   * ```ts\n   * assetSource={{ assetId: require('./assets/db.db') }}\n   * ```\n   */\n  assetSource?: SQLiteProviderAssetSource;\n\n  /**\n   * The children to render.\n   */\n  children: React.ReactNode;\n\n  /**\n   * A custom initialization handler to run before rendering the children.\n   * You can use this to run database migrations or other setup tasks.\n   */\n  onInit?: (db: SQLiteDatabase) => Promise<void>;\n\n  /**\n   * Handle errors from SQLiteProvider.\n   * @default rethrow the error\n   */\n  onError?: (error: Error) => void;\n\n  /**\n   * Enable [`React.Suspense`](https://react.dev/reference/react/Suspense) integration.\n   * @default false\n   * @example\n   * ```tsx\n   * export default function App() {\n   *   return (\n   *     <Suspense fallback={<Text>Loading...</Text>}>\n   *       <SQLiteProvider databaseName=\"test.db\" useSuspense={true}>\n   *         <Main />\n   *       </SQLiteProvider>\n   *     </Suspense>\n   *   );\n   * }\n   * ```\n   */\n  useSuspense?: boolean;\n}\n\n/**\n * Create a context for the SQLite database\n */\nconst SQLiteContext = createContext<SQLiteDatabase | null>(null);\n\n/**\n * Context.Provider component that provides a SQLite database to all children.\n * All descendants of this component will be able to access the database using the [`useSQLiteContext`](#usesqlitecontext) hook.\n */\nexport function SQLiteProvider({\n  children,\n  onError,\n  useSuspense = false,\n  ...props\n}: SQLiteProviderProps) {\n  if (onError != null && useSuspense) {\n    throw new Error('Cannot use `onError` with `useSuspense`, use error boundaries instead.');\n  }\n\n  if (useSuspense) {\n    return <SQLiteProviderSuspense {...props}>{children}</SQLiteProviderSuspense>;\n  }\n\n  return (\n    <SQLiteProviderNonSuspense {...props} onError={onError}>\n      {children}\n    </SQLiteProviderNonSuspense>\n  );\n}\n\n/**\n * A global hook for accessing the SQLite database across components.\n * This hook should only be used within a [`<SQLiteProvider>`](#sqliteprovider) component.\n *\n * @example\n * ```tsx\n * export default function App() {\n *   return (\n *     <SQLiteProvider databaseName=\"test.db\">\n *       <Main />\n *     </SQLiteProvider>\n *   );\n * }\n *\n * export function Main() {\n *   const db = useSQLiteContext();\n *   console.log('sqlite version', db.getFirstSync('SELECT sqlite_version()'));\n *   return <View />\n * }\n * ```\n */\nexport function useSQLiteContext(): SQLiteDatabase {\n  const context = useContext(SQLiteContext);\n  if (context == null) {\n    throw new Error('useSQLiteContext must be used within a <SQLiteProvider>');\n  }\n  return context;\n}\n\n//#region Internals\n\ntype DatabaseInstanceType = Pick<\n  SQLiteProviderProps,\n  'databaseName' | 'directory' | 'options' | 'onInit'\n> & {\n  promise: Promise<SQLiteDatabase> | null;\n};\n\nlet databaseInstance: DatabaseInstanceType | null = null;\n\nfunction SQLiteProviderSuspense({\n  databaseName,\n  directory,\n  options,\n  assetSource,\n  children,\n  onInit,\n}: Omit<SQLiteProviderProps, 'onError' | 'useSuspense'>) {\n  const databasePromise = getDatabaseAsync({\n    databaseName,\n    directory,\n    options,\n    assetSource,\n    onInit,\n  });\n  const database = use(databasePromise);\n  return <SQLiteContext.Provider value={database}>{children}</SQLiteContext.Provider>;\n}\n\nfunction SQLiteProviderNonSuspense({\n  databaseName,\n  directory,\n  options,\n  assetSource,\n  children,\n  onInit,\n  onError,\n}: Omit<SQLiteProviderProps, 'useSuspense'>) {\n  const databaseRef = useRef<SQLiteDatabase | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    async function setup() {\n      try {\n        const db = await openDatabaseWithInitAsync({\n          databaseName,\n          directory,\n          options,\n          assetSource,\n          onInit,\n        });\n        databaseRef.current = db;\n        setLoading(false);\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    async function teardown(db: SQLiteDatabase | null) {\n      try {\n        await db?.closeAsync();\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    setup();\n\n    return () => {\n      const db = databaseRef.current;\n      teardown(db);\n      databaseRef.current = null;\n      setLoading(true);\n    };\n  }, [databaseName, directory, options, onInit]);\n\n  if (error != null) {\n    const handler =\n      onError ??\n      ((e) => {\n        throw e;\n      });\n    handler(error);\n  }\n  if (loading || !databaseRef.current) {\n    return null;\n  }\n  return <SQLiteContext.Provider value={databaseRef.current}>{children}</SQLiteContext.Provider>;\n}\n\nfunction getDatabaseAsync({\n  databaseName,\n  directory,\n  options,\n  assetSource,\n  onInit,\n}: Pick<\n  SQLiteProviderProps,\n  'databaseName' | 'directory' | 'options' | 'assetSource' | 'onInit'\n>): Promise<SQLiteDatabase> {\n  if (\n    databaseInstance?.promise != null &&\n    databaseInstance?.databaseName === databaseName &&\n    databaseInstance?.directory === directory &&\n    databaseInstance?.options === options &&\n    databaseInstance?.onInit === onInit\n  ) {\n    return databaseInstance.promise;\n  }\n\n  let promise: Promise<SQLiteDatabase>;\n  if (databaseInstance?.promise != null) {\n    promise = databaseInstance.promise\n      .then((db) => {\n        db.closeAsync();\n      })\n      .then(() => {\n        return openDatabaseWithInitAsync({\n          databaseName,\n          directory,\n          options,\n          assetSource,\n          onInit,\n        });\n      });\n  } else {\n    promise = openDatabaseWithInitAsync({ databaseName, directory, options, assetSource, onInit });\n  }\n  databaseInstance = {\n    databaseName,\n    directory,\n    options,\n    onInit,\n    promise,\n  };\n  return promise;\n}\n\nasync function openDatabaseWithInitAsync({\n  databaseName,\n  directory,\n  options,\n  assetSource,\n  onInit,\n}: Pick<\n  SQLiteProviderProps,\n  'databaseName' | 'directory' | 'options' | 'assetSource' | 'onInit'\n>): Promise<SQLiteDatabase> {\n  if (assetSource != null) {\n    await importDatabaseFromAssetAsync(databaseName, assetSource, directory);\n  }\n  const database = await openDatabaseAsync(databaseName, options, directory);\n  if (onInit != null) {\n    await onInit(database);\n  }\n  return database;\n}\n\n/**\n * Imports an asset database into the SQLite database directory.\n *\n * Exposed only for testing purposes.\n * @hidden\n */\nexport async function importDatabaseFromAssetAsync(\n  databaseName: string,\n  assetSource: SQLiteProviderAssetSource,\n  directory?: string\n) {\n  const asset = await Asset.fromModule(assetSource.assetId).downloadAsync();\n  if (!asset.localUri) {\n    throw new Error(`Unable to get the localUri from asset ${assetSource.assetId}`);\n  }\n  const path = createDatabasePath(databaseName, directory);\n  await ExpoSQLite.importAssetDatabaseAsync(\n    path,\n    asset.localUri,\n    assetSource.forceOverwrite ?? false\n  );\n}\n\n//#endregion\n\n//#region Private Suspense API similar to `React.use`\n\n// Referenced from https://github.com/vercel/swr/blob/1d8110900d1aee3747199bfb377b149b7ff6848e/_internal/src/types.ts#L27-L31\ntype ReactUsePromise<T, E extends Error = Error> = Promise<T> & {\n  status?: 'pending' | 'fulfilled' | 'rejected';\n  value?: T;\n  reason?: E;\n};\n\n// Referenced from https://github.com/reactjs/react.dev/blob/6570e6cd79a16ac3b1a2902632eddab7e6abb9ad/src/content/reference/react/Suspense.md\n/**\n * A custom hook like [`React.use`](https://react.dev/reference/react/use) hook using private Suspense implementation.\n */\nfunction use<T>(promise: Promise<T> | ReactUsePromise<T>) {\n  if (isReactUsePromise(promise)) {\n    if (promise.status === 'fulfilled') {\n      if (promise.value === undefined) {\n        throw new Error('[use] Unexpected undefined value from promise');\n      }\n      return promise.value;\n    } else if (promise.status === 'rejected') {\n      throw promise.reason;\n    } else if (promise.status === 'pending') {\n      throw promise;\n    }\n    throw new Error('[use] Promise is in an invalid state');\n  }\n\n  const suspensePromise = promise as ReactUsePromise<T>;\n  suspensePromise.status = 'pending';\n  suspensePromise.then(\n    (result: T) => {\n      suspensePromise.status = 'fulfilled';\n      suspensePromise.value = result;\n    },\n    (reason) => {\n      suspensePromise.status = 'rejected';\n      suspensePromise.reason = reason;\n    }\n  );\n  throw suspensePromise;\n}\n\nfunction isReactUsePromise<T>(\n  promise: Promise<T> | ReactUsePromise<T>\n): promise is ReactUsePromise<T> {\n  return typeof promise === 'object' && promise !== null && 'status' in promise;\n}\n\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}