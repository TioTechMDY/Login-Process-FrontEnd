{"ast":null,"code":"import ExpoSQLite from './ExpoSQLite';\nfunction resolveDbDirectory(directory) {\n  var resolvedDirectory = directory != null ? directory : ExpoSQLite.defaultDatabaseDirectory;\n  if (resolvedDirectory === null) {\n    throw new Error('Both provided directory and defaultDatabaseDirectory are null.');\n  }\n  return resolvedDirectory;\n}\nexport function createDatabasePath(databaseName, directory) {\n  if (databaseName === ':memory:') return databaseName;\n  var resolvedDirectory = resolveDbDirectory(directory);\n  function removeTrailingSlash(path) {\n    return path.replace(/\\/*$/, '');\n  }\n  function removeLeadingSlash(path) {\n    return path.replace(/^\\/+/, '');\n  }\n  return `${removeTrailingSlash(resolvedDirectory)}/${removeLeadingSlash(databaseName)}`;\n}","map":{"version":3,"names":["ExpoSQLite","resolveDbDirectory","directory","resolvedDirectory","defaultDatabaseDirectory","Error","createDatabasePath","databaseName","removeTrailingSlash","path","replace","removeLeadingSlash"],"sources":["D:\\Development\\React_nactive\\login_process\\frontend\\node_modules\\expo-sqlite\\src\\pathUtils.ts"],"sourcesContent":["import ExpoSQLite from './ExpoSQLite';\n\n/**\n * Resolves the database directory from the given directory or the default directory.\n *\n * @hidden\n */\nfunction resolveDbDirectory(directory: string | undefined): string {\n  const resolvedDirectory = directory ?? ExpoSQLite.defaultDatabaseDirectory;\n  if (resolvedDirectory === null) {\n    throw new Error('Both provided directory and defaultDatabaseDirectory are null.');\n  }\n  return resolvedDirectory;\n}\n\n/**\n * Creates a normalized database path by combining the directory and database name.\n *\n * Ensures the directory does not end with a trailing slash and the database name\n * does not start with a leading slash, preventing redundant slashes in the final path.\n *\n * @hidden\n */\nexport function createDatabasePath(databaseName: string, directory?: string): string {\n  if (databaseName === ':memory:') return databaseName;\n  const resolvedDirectory = resolveDbDirectory(directory);\n\n  function removeTrailingSlash(path: string): string {\n    return path.replace(/\\/*$/, '');\n  }\n  function removeLeadingSlash(path: string): string {\n    return path.replace(/^\\/+/, '');\n  }\n\n  return `${removeTrailingSlash(resolvedDirectory)}/${removeLeadingSlash(databaseName)}`;\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAOrC,SAASC,kBAAkBA,CAACC,SAA6B;EACvD,IAAMC,iBAAiB,GAAGD,SAAS,WAATA,SAAS,GAAIF,UAAU,CAACI,wBAAwB;EAC1E,IAAID,iBAAiB,KAAK,IAAI,EAAE;IAC9B,MAAM,IAAIE,KAAK,CAAC,gEAAgE,CAAC;;EAEnF,OAAOF,iBAAiB;AAC1B;AAUA,OAAM,SAAUG,kBAAkBA,CAACC,YAAoB,EAAEL,SAAkB;EACzE,IAAIK,YAAY,KAAK,UAAU,EAAE,OAAOA,YAAY;EACpD,IAAMJ,iBAAiB,GAAGF,kBAAkB,CAACC,SAAS,CAAC;EAEvD,SAASM,mBAAmBA,CAACC,IAAY;IACvC,OAAOA,IAAI,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACjC;EACA,SAASC,kBAAkBA,CAACF,IAAY;IACtC,OAAOA,IAAI,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACjC;EAEA,OAAO,GAAGF,mBAAmB,CAACL,iBAAiB,CAAC,IAAIQ,kBAAkB,CAACJ,YAAY,CAAC,EAAE;AACxF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}