{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Development\\\\React_nactive\\\\login_process\\\\frontend\\\\screens\\\\RegisterScreen.js\",\n  _this = this;\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as SQLite from 'expo-sqlite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar db = SQLite.openDatabase('MyApp.db');\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleRegister = function handleRegister() {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO users (email, password) VALUES (?, ?)', [email, password], function () {\n        alert('Registered successfully');\n        navigation.navigate('Login');\n      }, function (_, error) {\n        alert('Registration failed: ' + error.message);\n      });\n    });\n  };\n  return _jsxDEV(View, {\n    children: [_jsxDEV(TextInput, {\n      placeholder: \"Email\",\n      onChangeText: setEmail,\n      value: email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, _this), _jsxDEV(TextInput, {\n      placeholder: \"Password\",\n      onChangeText: setPassword,\n      value: password,\n      secureTextEntry: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this), _jsxDEV(Button, {\n      title: \"Register\",\n      onPress: handleRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, _this);\n};\nexport default RegisterScreen;","map":{"version":3,"names":["React","useState","View","TextInput","Button","SQLite","jsxDEV","_jsxDEV","db","openDatabase","RegisterScreen","_ref","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleRegister","transaction","tx","executeSql","alert","navigate","_","error","message","children","placeholder","onChangeText","value","fileName","_jsxFileName","lineNumber","columnNumber","_this","secureTextEntry","title","onPress"],"sources":["D:/Development/React_nactive/login_process/frontend/screens/RegisterScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, TextInput, Button } from 'react-native';\r\nimport * as SQLite from 'expo-sqlite';\r\n\r\nconst db = SQLite.openDatabase('MyApp.db');\r\n\r\nconst RegisterScreen = ({ navigation }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleRegister = () => {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n        'INSERT INTO users (email, password) VALUES (?, ?)',\r\n        [email, password],\r\n        () => {\r\n          alert('Registered successfully');\r\n          navigation.navigate('Login');\r\n        },\r\n        (_, error) => {\r\n          alert('Registration failed: ' + error.message);\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <TextInput placeholder=\"Email\" onChangeText={setEmail} value={email} />\r\n      <TextInput placeholder=\"Password\" onChangeText={setPassword} value={password} secureTextEntry />\r\n      <Button title=\"Register\" onPress={handleRegister} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default RegisterScreen;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAExC,OAAO,KAAKC,MAAM,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,IAAMC,EAAE,GAAGH,MAAM,CAACI,YAAY,CAAC,UAAU,CAAC;AAE1C,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAClC,IAAAC,SAAA,GAA0BZ,QAAQ,CAAC,EAAE,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAgCjB,QAAQ,CAAC,EAAE,CAAC;IAAAkB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAE5B,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAC3Bd,EAAE,CAACe,WAAW,CAAC,UAAAC,EAAE,EAAI;MACnBA,EAAE,CAACC,UAAU,CACX,mDAAmD,EACnD,CAACT,KAAK,EAAEI,QAAQ,CAAC,EACjB,YAAM;QACJM,KAAK,CAAC,yBAAyB,CAAC;QAChCd,UAAU,CAACe,QAAQ,CAAC,OAAO,CAAC;MAC9B,CAAC,EACD,UAACC,CAAC,EAAEC,KAAK,EAAK;QACZH,KAAK,CAAC,uBAAuB,GAAGG,KAAK,CAACC,OAAO,CAAC;MAChD,CACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,OACEvB,OAAA,CAACL,IAAI;IAAA6B,QAAA,GACHxB,OAAA,CAACJ,SAAS;MAAC6B,WAAW,EAAC,OAAO;MAACC,YAAY,EAAEhB,QAAS;MAACiB,KAAK,EAAElB;IAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAE,CAAC,EACvEhC,OAAA,CAACJ,SAAS;MAAC6B,WAAW,EAAC,UAAU;MAACC,YAAY,EAAEZ,WAAY;MAACa,KAAK,EAAEd,QAAS;MAACoB,eAAe;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAE,CAAC,EAChGhC,OAAA,CAACH,MAAM;MAACqC,KAAK,EAAC,UAAU;MAACC,OAAO,EAAEpB;IAAe;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAE,CAAC;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KAChD,CAAC;AAEX,CAAC;AAED,eAAe7B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}