{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/wrapAsyncGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _asyncIterator(r) { var n, t, o, e = 2; for (\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = \"@@asyncIterator\", o = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(r) { var n = this.s.return; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, throw: function _throw(r) { var n = this.s.return; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); }\nimport ExpoSQLite from './ExpoSQLite';\nimport { SQLiteStatement } from './SQLiteStatement';\nimport { createDatabasePath } from './pathUtils';\nvar memoWarnCRSQLiteDeprecation = false;\nexport var SQLiteDatabase = function () {\n  function SQLiteDatabase(databasePath, options, nativeDatabase) {\n    _classCallCheck(this, SQLiteDatabase);\n    this.databasePath = databasePath;\n    this.options = options;\n    this.nativeDatabase = nativeDatabase;\n  }\n  return _createClass(SQLiteDatabase, [{\n    key: \"isInTransactionAsync\",\n    value: function isInTransactionAsync() {\n      return this.nativeDatabase.isInTransactionAsync();\n    }\n  }, {\n    key: \"closeAsync\",\n    value: function closeAsync() {\n      return this.nativeDatabase.closeAsync();\n    }\n  }, {\n    key: \"execAsync\",\n    value: function execAsync(source) {\n      return this.nativeDatabase.execAsync(source);\n    }\n  }, {\n    key: \"serializeAsync\",\n    value: function serializeAsync() {\n      var databaseName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'main';\n      return this.nativeDatabase.serializeAsync(databaseName);\n    }\n  }, {\n    key: \"prepareAsync\",\n    value: (function () {\n      var _prepareAsync = _asyncToGenerator(function* (source) {\n        var nativeStatement = new ExpoSQLite.NativeStatement();\n        yield this.nativeDatabase.prepareAsync(nativeStatement, source);\n        return new SQLiteStatement(this.nativeDatabase, nativeStatement);\n      });\n      function prepareAsync(_x) {\n        return _prepareAsync.apply(this, arguments);\n      }\n      return prepareAsync;\n    }())\n  }, {\n    key: \"withTransactionAsync\",\n    value: (function () {\n      var _withTransactionAsync = _asyncToGenerator(function* (task) {\n        try {\n          yield this.execAsync('BEGIN');\n          yield task();\n          yield this.execAsync('COMMIT');\n        } catch (e) {\n          yield this.execAsync('ROLLBACK');\n          throw e;\n        }\n      });\n      function withTransactionAsync(_x2) {\n        return _withTransactionAsync.apply(this, arguments);\n      }\n      return withTransactionAsync;\n    }())\n  }, {\n    key: \"withExclusiveTransactionAsync\",\n    value: (function () {\n      var _withExclusiveTransactionAsync = _asyncToGenerator(function* (task) {\n        var transaction = yield Transaction.createAsync(this);\n        var error;\n        try {\n          yield transaction.execAsync('BEGIN');\n          yield task(transaction);\n          yield transaction.execAsync('COMMIT');\n        } catch (e) {\n          yield transaction.execAsync('ROLLBACK');\n          error = e;\n        } finally {\n          yield transaction.closeAsync();\n        }\n        if (error) {\n          throw error;\n        }\n      });\n      function withExclusiveTransactionAsync(_x3) {\n        return _withExclusiveTransactionAsync.apply(this, arguments);\n      }\n      return withExclusiveTransactionAsync;\n    }())\n  }, {\n    key: \"isInTransactionSync\",\n    value: function isInTransactionSync() {\n      return this.nativeDatabase.isInTransactionSync();\n    }\n  }, {\n    key: \"closeSync\",\n    value: function closeSync() {\n      return this.nativeDatabase.closeSync();\n    }\n  }, {\n    key: \"execSync\",\n    value: function execSync(source) {\n      return this.nativeDatabase.execSync(source);\n    }\n  }, {\n    key: \"serializeSync\",\n    value: function serializeSync() {\n      var databaseName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'main';\n      return this.nativeDatabase.serializeSync(databaseName);\n    }\n  }, {\n    key: \"prepareSync\",\n    value: function prepareSync(source) {\n      var nativeStatement = new ExpoSQLite.NativeStatement();\n      this.nativeDatabase.prepareSync(nativeStatement, source);\n      return new SQLiteStatement(this.nativeDatabase, nativeStatement);\n    }\n  }, {\n    key: \"withTransactionSync\",\n    value: function withTransactionSync(task) {\n      try {\n        this.execSync('BEGIN');\n        task();\n        this.execSync('COMMIT');\n      } catch (e) {\n        this.execSync('ROLLBACK');\n        throw e;\n      }\n    }\n  }, {\n    key: \"runAsync\",\n    value: function () {\n      var _runAsync = _asyncToGenerator(function* (source) {\n        var statement = yield this.prepareAsync(source);\n        var result;\n        try {\n          for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            params[_key - 1] = arguments[_key];\n          }\n          result = yield statement.executeAsync.apply(statement, params);\n        } finally {\n          yield statement.finalizeAsync();\n        }\n        return result;\n      });\n      function runAsync(_x4) {\n        return _runAsync.apply(this, arguments);\n      }\n      return runAsync;\n    }()\n  }, {\n    key: \"getFirstAsync\",\n    value: function () {\n      var _getFirstAsync = _asyncToGenerator(function* (source) {\n        var statement = yield this.prepareAsync(source);\n        var firstRow;\n        try {\n          for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            params[_key2 - 1] = arguments[_key2];\n          }\n          var result = yield statement.executeAsync.apply(statement, params);\n          firstRow = yield result.getFirstAsync();\n        } finally {\n          yield statement.finalizeAsync();\n        }\n        return firstRow;\n      });\n      function getFirstAsync(_x5) {\n        return _getFirstAsync.apply(this, arguments);\n      }\n      return getFirstAsync;\n    }()\n  }, {\n    key: \"getEachAsync\",\n    value: function getEachAsync(source) {\n      var _this = this;\n      for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        params[_key3 - 1] = arguments[_key3];\n      }\n      return _wrapAsyncGenerator(function* () {\n        var statement = yield _awaitAsyncGenerator(_this.prepareAsync(source));\n        try {\n          var result = yield _awaitAsyncGenerator(statement.executeAsync.apply(statement, params));\n          var _iteratorAbruptCompletion = false;\n          var _didIteratorError = false;\n          var _iteratorError;\n          try {\n            for (var _iterator = _asyncIterator(result), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n              var row = _step.value;\n              {\n                yield row;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion && _iterator.return != null) {\n                yield _awaitAsyncGenerator(_iterator.return());\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        } finally {\n          yield _awaitAsyncGenerator(statement.finalizeAsync());\n        }\n      })();\n    }\n  }, {\n    key: \"getAllAsync\",\n    value: function () {\n      var _getAllAsync = _asyncToGenerator(function* (source) {\n        var statement = yield this.prepareAsync(source);\n        var allRows;\n        try {\n          for (var _len4 = arguments.length, params = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n            params[_key4 - 1] = arguments[_key4];\n          }\n          var result = yield statement.executeAsync.apply(statement, params);\n          allRows = yield result.getAllAsync();\n        } finally {\n          yield statement.finalizeAsync();\n        }\n        return allRows;\n      });\n      function getAllAsync(_x6) {\n        return _getAllAsync.apply(this, arguments);\n      }\n      return getAllAsync;\n    }()\n  }, {\n    key: \"runSync\",\n    value: function runSync(source) {\n      var statement = this.prepareSync(source);\n      var result;\n      try {\n        for (var _len5 = arguments.length, params = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          params[_key5 - 1] = arguments[_key5];\n        }\n        result = statement.executeSync.apply(statement, params);\n      } finally {\n        statement.finalizeSync();\n      }\n      return result;\n    }\n  }, {\n    key: \"getFirstSync\",\n    value: function getFirstSync(source) {\n      var statement = this.prepareSync(source);\n      var firstRow;\n      try {\n        for (var _len6 = arguments.length, params = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          params[_key6 - 1] = arguments[_key6];\n        }\n        var result = statement.executeSync.apply(statement, params);\n        firstRow = result.getFirstSync();\n      } finally {\n        statement.finalizeSync();\n      }\n      return firstRow;\n    }\n  }, {\n    key: \"getEachSync\",\n    value: function* getEachSync(source) {\n      var statement = this.prepareSync(source);\n      try {\n        for (var _len7 = arguments.length, params = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n          params[_key7 - 1] = arguments[_key7];\n        }\n        var result = statement.executeSync.apply(statement, params);\n        for (var row of result) {\n          yield row;\n        }\n      } finally {\n        statement.finalizeSync();\n      }\n    }\n  }, {\n    key: \"getAllSync\",\n    value: function getAllSync(source) {\n      var statement = this.prepareSync(source);\n      var allRows;\n      try {\n        for (var _len8 = arguments.length, params = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n          params[_key8 - 1] = arguments[_key8];\n        }\n        var result = statement.executeSync.apply(statement, params);\n        allRows = result.getAllSync();\n      } finally {\n        statement.finalizeSync();\n      }\n      return allRows;\n    }\n  }]);\n}();\nexport var defaultDatabaseDirectory = ExpoSQLite.defaultDatabaseDirectory;\nexport function openDatabaseAsync(_x7, _x8, _x9) {\n  return _openDatabaseAsync.apply(this, arguments);\n}\nfunction _openDatabaseAsync() {\n  _openDatabaseAsync = _asyncToGenerator(function* (databaseName, options, directory) {\n    var openOptions = options != null ? options : {};\n    var databasePath = createDatabasePath(databaseName, directory);\n    yield ExpoSQLite.ensureDatabasePathExistsAsync(databasePath);\n    maybeWarnCRSQLiteDeprecation(options);\n    var nativeDatabase = new ExpoSQLite.NativeDatabase(databasePath, openOptions);\n    yield nativeDatabase.initAsync();\n    return new SQLiteDatabase(databasePath, openOptions, nativeDatabase);\n  });\n  return _openDatabaseAsync.apply(this, arguments);\n}\nexport function openDatabaseSync(databaseName, options, directory) {\n  var openOptions = options != null ? options : {};\n  var databasePath = createDatabasePath(databaseName, directory);\n  ExpoSQLite.ensureDatabasePathExistsSync(databasePath);\n  maybeWarnCRSQLiteDeprecation(options);\n  var nativeDatabase = new ExpoSQLite.NativeDatabase(databasePath, openOptions);\n  nativeDatabase.initSync();\n  return new SQLiteDatabase(databasePath, openOptions, nativeDatabase);\n}\nexport function deserializeDatabaseAsync(_x10, _x11) {\n  return _deserializeDatabaseAsync.apply(this, arguments);\n}\nfunction _deserializeDatabaseAsync() {\n  _deserializeDatabaseAsync = _asyncToGenerator(function* (serializedData, options) {\n    var openOptions = options != null ? options : {};\n    maybeWarnCRSQLiteDeprecation(options);\n    var nativeDatabase = new ExpoSQLite.NativeDatabase(':memory:', openOptions, serializedData);\n    yield nativeDatabase.initAsync();\n    return new SQLiteDatabase(':memory:', openOptions, nativeDatabase);\n  });\n  return _deserializeDatabaseAsync.apply(this, arguments);\n}\nexport function deserializeDatabaseSync(serializedData, options) {\n  var openOptions = options != null ? options : {};\n  maybeWarnCRSQLiteDeprecation(options);\n  var nativeDatabase = new ExpoSQLite.NativeDatabase(':memory:', openOptions, serializedData);\n  nativeDatabase.initSync();\n  return new SQLiteDatabase(':memory:', openOptions, nativeDatabase);\n}\nexport function deleteDatabaseAsync(_x12, _x13) {\n  return _deleteDatabaseAsync.apply(this, arguments);\n}\nfunction _deleteDatabaseAsync() {\n  _deleteDatabaseAsync = _asyncToGenerator(function* (databaseName, directory) {\n    var databasePath = createDatabasePath(databaseName, directory);\n    return yield ExpoSQLite.deleteDatabaseAsync(databasePath);\n  });\n  return _deleteDatabaseAsync.apply(this, arguments);\n}\nexport function deleteDatabaseSync(databaseName, directory) {\n  var databasePath = createDatabasePath(databaseName, directory);\n  return ExpoSQLite.deleteDatabaseSync(databasePath);\n}\nexport function addDatabaseChangeListener(listener) {\n  return ExpoSQLite.addListener('onDatabaseChange', listener);\n}\nvar Transaction = function (_SQLiteDatabase) {\n  function Transaction() {\n    _classCallCheck(this, Transaction);\n    return _callSuper(this, Transaction, arguments);\n  }\n  _inherits(Transaction, _SQLiteDatabase);\n  return _createClass(Transaction, null, [{\n    key: \"createAsync\",\n    value: function () {\n      var _createAsync = _asyncToGenerator(function* (db) {\n        var options = _objectSpread(_objectSpread({}, db.options), {}, {\n          useNewConnection: true\n        });\n        maybeWarnCRSQLiteDeprecation(options);\n        var nativeDatabase = new ExpoSQLite.NativeDatabase(db.databasePath, options);\n        yield nativeDatabase.initAsync();\n        return new Transaction(db.databasePath, options, nativeDatabase);\n      });\n      function createAsync(_x14) {\n        return _createAsync.apply(this, arguments);\n      }\n      return createAsync;\n    }()\n  }]);\n}(SQLiteDatabase);\nfunction maybeWarnCRSQLiteDeprecation(openOptions) {\n  var enableCRSQLite = (openOptions == null ? void 0 : openOptions.enableCRSQLite) === true;\n  if (!enableCRSQLite || __DEV__ !== true || memoWarnCRSQLiteDeprecation) {\n    return;\n  }\n  console.warn('CR-SQLite is no longer actively maintained. The experimental `enableCRSQLite` option is deprecated and will be removed in SDK 53.');\n  memoWarnCRSQLiteDeprecation = true;\n}","map":{"version":3,"names":["ExpoSQLite","SQLiteStatement","createDatabasePath","memoWarnCRSQLiteDeprecation","SQLiteDatabase","databasePath","options","nativeDatabase","_classCallCheck","_createClass","key","value","isInTransactionAsync","closeAsync","execAsync","source","serializeAsync","databaseName","arguments","length","undefined","_prepareAsync","_asyncToGenerator","nativeStatement","NativeStatement","prepareAsync","_x","apply","_withTransactionAsync","task","e","withTransactionAsync","_x2","_withExclusiveTransactionAsync","transaction","Transaction","createAsync","error","withExclusiveTransactionAsync","_x3","isInTransactionSync","closeSync","execSync","serializeSync","prepareSync","withTransactionSync","_runAsync","statement","result","_len","params","Array","_key","executeAsync","finalizeAsync","runAsync","_x4","_getFirstAsync","firstRow","_len2","_key2","getFirstAsync","_x5","getEachAsync","_this","_len3","_key3","_wrapAsyncGenerator","_awaitAsyncGenerator","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","_step","next","done","row","err","return","_getAllAsync","allRows","_len4","_key4","getAllAsync","_x6","runSync","_len5","_key5","executeSync","finalizeSync","getFirstSync","_len6","_key6","getEachSync","_len7","_key7","getAllSync","_len8","_key8","defaultDatabaseDirectory","openDatabaseAsync","_x7","_x8","_x9","_openDatabaseAsync","directory","openOptions","ensureDatabasePathExistsAsync","maybeWarnCRSQLiteDeprecation","NativeDatabase","initAsync","openDatabaseSync","ensureDatabasePathExistsSync","initSync","deserializeDatabaseAsync","_x10","_x11","_deserializeDatabaseAsync","serializedData","deserializeDatabaseSync","deleteDatabaseAsync","_x12","_x13","_deleteDatabaseAsync","deleteDatabaseSync","addDatabaseChangeListener","listener","addListener","_SQLiteDatabase","_callSuper","_inherits","_createAsync","db","_objectSpread","useNewConnection","_x14","enableCRSQLite","__DEV__","console","warn"],"sources":["D:\\Development\\React_nactive\\login_process\\frontend\\node_modules\\expo-sqlite\\src\\SQLiteDatabase.ts"],"sourcesContent":["import { type EventSubscription } from 'expo-modules-core';\n\nimport ExpoSQLite from './ExpoSQLite';\nimport { NativeDatabase, SQLiteOpenOptions } from './NativeDatabase';\nimport {\n  SQLiteBindParams,\n  SQLiteExecuteAsyncResult,\n  SQLiteExecuteSyncResult,\n  SQLiteRunResult,\n  SQLiteStatement,\n  SQLiteVariadicBindParams,\n} from './SQLiteStatement';\nimport { createDatabasePath } from './pathUtils';\n\nexport { SQLiteOpenOptions };\n\nlet memoWarnCRSQLiteDeprecation = false;\n\n/**\n * A SQLite database.\n */\nexport class SQLiteDatabase {\n  constructor(\n    public readonly databasePath: string,\n    public readonly options: SQLiteOpenOptions,\n    private readonly nativeDatabase: NativeDatabase\n  ) {}\n\n  /**\n   * Asynchronous call to return whether the database is currently in a transaction.\n   */\n  public isInTransactionAsync(): Promise<boolean> {\n    return this.nativeDatabase.isInTransactionAsync();\n  }\n\n  /**\n   * Close the database.\n   */\n  public closeAsync(): Promise<void> {\n    return this.nativeDatabase.closeAsync();\n  }\n\n  /**\n   * Execute all SQL queries in the supplied string.\n   * > Note: The queries are not escaped for you! Be careful when constructing your queries.\n   *\n   * @param source A string containing all the SQL queries.\n   */\n  public execAsync(source: string): Promise<void> {\n    return this.nativeDatabase.execAsync(source);\n  }\n\n  /**\n   * [Serialize the database](https://sqlite.org/c3ref/serialize.html) as `Uint8Array`.\n   *\n   * @param databaseName The name of the current attached databases. The default value is `main` which is the default database name.\n   */\n  public serializeAsync(databaseName: string = 'main'): Promise<Uint8Array> {\n    return this.nativeDatabase.serializeAsync(databaseName);\n  }\n\n  /**\n   * Create a [prepared SQLite statement](https://www.sqlite.org/c3ref/prepare.html).\n   *\n   * @param source A string containing the SQL query.\n   */\n  public async prepareAsync(source: string): Promise<SQLiteStatement> {\n    const nativeStatement = new ExpoSQLite.NativeStatement();\n    await this.nativeDatabase.prepareAsync(nativeStatement, source);\n    return new SQLiteStatement(this.nativeDatabase, nativeStatement);\n  }\n\n  /**\n   * Execute a transaction and automatically commit/rollback based on the `task` result.\n   *\n   * > **Note:** This transaction is not exclusive and can be interrupted by other async queries.\n   * @example\n   * ```ts\n   * db.withTransactionAsync(async () => {\n   *   await db.execAsync('UPDATE test SET name = \"aaa\"');\n   *\n   *   //\n   *   // We cannot control the order of async/await order, so order of execution is not guaranteed.\n   *   // The following UPDATE query out of transaction may be executed here and break the expectation.\n   *   //\n   *\n   *   const result = await db.getFirstAsync<{ name: string }>('SELECT name FROM Users');\n   *   expect(result?.name).toBe('aaa');\n   * });\n   * db.execAsync('UPDATE test SET name = \"bbb\"');\n   * ```\n   * If you worry about the order of execution, use `withExclusiveTransactionAsync` instead.\n   *\n   * @param task An async function to execute within a transaction.\n   */\n  public async withTransactionAsync(task: () => Promise<void>): Promise<void> {\n    try {\n      await this.execAsync('BEGIN');\n      await task();\n      await this.execAsync('COMMIT');\n    } catch (e) {\n      await this.execAsync('ROLLBACK');\n      throw e;\n    }\n  }\n\n  /**\n   * Execute a transaction and automatically commit/rollback based on the `task` result.\n   *\n   * The transaction may be exclusive.\n   * As long as the transaction is converted into a write transaction,\n   * the other async write queries will abort with `database is locked` error.\n   *\n   * @param task An async function to execute within a transaction. Any queries inside the transaction must be executed on the `txn` object.\n   * The `txn` object has the same interfaces as the [`SQLiteDatabase`](#sqlitedatabase) object. You can use `txn` like a [`SQLiteDatabase`](#sqlitedatabase) object.\n   *\n   * @example\n   * ```ts\n   * db.withExclusiveTransactionAsync(async (txn) => {\n   *   await txn.execAsync('UPDATE test SET name = \"aaa\"');\n   * });\n   * ```\n   */\n  public async withExclusiveTransactionAsync(\n    task: (txn: Transaction) => Promise<void>\n  ): Promise<void> {\n    const transaction = await Transaction.createAsync(this);\n    let error;\n    try {\n      await transaction.execAsync('BEGIN');\n      await task(transaction);\n      await transaction.execAsync('COMMIT');\n    } catch (e) {\n      await transaction.execAsync('ROLLBACK');\n      error = e;\n    } finally {\n      await transaction.closeAsync();\n    }\n    if (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Synchronous call to return whether the database is currently in a transaction.\n   */\n  public isInTransactionSync(): boolean {\n    return this.nativeDatabase.isInTransactionSync();\n  }\n\n  /**\n   * Close the database.\n   */\n  public closeSync(): void {\n    return this.nativeDatabase.closeSync();\n  }\n\n  /**\n   * Execute all SQL queries in the supplied string.\n   *\n   * > **Note:** The queries are not escaped for you! Be careful when constructing your queries.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   *\n   * @param source A string containing all the SQL queries.\n   */\n  public execSync(source: string): void {\n    return this.nativeDatabase.execSync(source);\n  }\n\n  /**\n   * [Serialize the database](https://sqlite.org/c3ref/serialize.html) as `Uint8Array`.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   *\n   * @param databaseName The name of the current attached databases. The default value is `main` which is the default database name.\n   */\n  public serializeSync(databaseName: string = 'main'): Uint8Array {\n    return this.nativeDatabase.serializeSync(databaseName);\n  }\n\n  /**\n   * Create a [prepared SQLite statement](https://www.sqlite.org/c3ref/prepare.html).\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   *\n   * @param source A string containing the SQL query.\n   */\n  public prepareSync(source: string): SQLiteStatement {\n    const nativeStatement = new ExpoSQLite.NativeStatement();\n    this.nativeDatabase.prepareSync(nativeStatement, source);\n    return new SQLiteStatement(this.nativeDatabase, nativeStatement);\n  }\n\n  /**\n   * Execute a transaction and automatically commit/rollback based on the `task` result.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   *\n   * @param task An async function to execute within a transaction.\n   */\n  public withTransactionSync(task: () => void): void {\n    try {\n      this.execSync('BEGIN');\n      task();\n      this.execSync('COMMIT');\n    } catch (e) {\n      this.execSync('ROLLBACK');\n      throw e;\n    }\n  }\n\n  //#region Statement API shorthands\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public runAsync(source: string, params: SQLiteBindParams): Promise<SQLiteRunResult>;\n\n  /**\n   * @hidden\n   */\n  public runAsync(source: string, ...params: SQLiteVariadicBindParams): Promise<SQLiteRunResult>;\n  public async runAsync(source: string, ...params: any[]): Promise<SQLiteRunResult> {\n    const statement = await this.prepareAsync(source);\n    let result: SQLiteExecuteAsyncResult<unknown>;\n    try {\n      result = await statement.executeAsync(...params);\n    } finally {\n      await statement.finalizeAsync();\n    }\n    return result;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult.getFirstAsync()`](#getfirstasync), and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public getFirstAsync<T>(source: string, params: SQLiteBindParams): Promise<T | null>;\n  /**\n   * @hidden\n   */\n  public getFirstAsync<T>(source: string, ...params: SQLiteVariadicBindParams): Promise<T | null>;\n  public async getFirstAsync<T>(source: string, ...params: any[]): Promise<T | null> {\n    const statement = await this.prepareAsync(source);\n    let firstRow: T | null;\n    try {\n      const result = await statement.executeAsync<T>(...params);\n      firstRow = await result.getFirstAsync();\n    } finally {\n      await statement.finalizeAsync();\n    }\n    return firstRow;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult`](#sqliteexecuteasyncresult) `AsyncIterator`, and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   * @returns Rather than returning Promise, this function returns an [`AsyncIterableIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator). You can use `for await...of` to iterate over the rows from the SQLite query result.\n   */\n  public getEachAsync<T>(source: string, params: SQLiteBindParams): AsyncIterableIterator<T>;\n  /**\n   * @hidden\n   */\n  public getEachAsync<T>(\n    source: string,\n    ...params: SQLiteVariadicBindParams\n  ): AsyncIterableIterator<T>;\n  public async *getEachAsync<T>(source: string, ...params: any[]): AsyncIterableIterator<T> {\n    const statement = await this.prepareAsync(source);\n    try {\n      const result = await statement.executeAsync<T>(...params);\n      for await (const row of result) {\n        yield row;\n      }\n    } finally {\n      await statement.finalizeAsync();\n    }\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult.getAllAsync()`](#getallasync), and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   * @example\n   * ```ts\n   * // For unnamed parameters, you pass values in an array.\n   * db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', [1, 'Hello']);\n   *\n   * // For unnamed parameters, you pass values in variadic arguments.\n   * db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', 1, 'Hello');\n   *\n   * // For named parameters, you should pass values in object.\n   * db.getAllAsync('SELECT * FROM test WHERE intValue = $intValue AND name = $name', { $intValue: 1, $name: 'Hello' });\n   * ```\n   */\n  public getAllAsync<T>(source: string, params: SQLiteBindParams): Promise<T[]>;\n  /**\n   * @hidden\n   */\n  public getAllAsync<T>(source: string, ...params: SQLiteVariadicBindParams): Promise<T[]>;\n  public async getAllAsync<T>(source: string, ...params: any[]): Promise<T[]> {\n    const statement = await this.prepareAsync(source);\n    let allRows;\n    try {\n      const result = await statement.executeAsync<T>(...params);\n      allRows = await result.getAllAsync();\n    } finally {\n      await statement.finalizeAsync();\n    }\n    return allRows;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public runSync(source: string, params: SQLiteBindParams): SQLiteRunResult;\n  /**\n   * @hidden\n   */\n  public runSync(source: string, ...params: SQLiteVariadicBindParams): SQLiteRunResult;\n  public runSync(source: string, ...params: any[]): SQLiteRunResult {\n    const statement = this.prepareSync(source);\n    let result: SQLiteExecuteSyncResult<unknown>;\n    try {\n      result = statement.executeSync(...params);\n    } finally {\n      statement.finalizeSync();\n    }\n    return result;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult.getFirstSync()`](#getfirstsync), and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public getFirstSync<T>(source: string, params: SQLiteBindParams): T | null;\n  /**\n   * @hidden\n   */\n  public getFirstSync<T>(source: string, ...params: SQLiteVariadicBindParams): T | null;\n  public getFirstSync<T>(source: string, ...params: any[]): T | null {\n    const statement = this.prepareSync(source);\n    let firstRow: T | null;\n    try {\n      const result = statement.executeSync<T>(...params);\n      firstRow = result.getFirstSync();\n    } finally {\n      statement.finalizeSync();\n    }\n    return firstRow;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult`](#sqliteexecutesyncresult) `Iterator`, and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   * @returns This function returns an [`IterableIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator). You can use `for...of` to iterate over the rows from the SQLite query result.\n   */\n  public getEachSync<T>(source: string, params: SQLiteBindParams): IterableIterator<T>;\n  /**\n   * @hidden\n   */\n  public getEachSync<T>(source: string, ...params: SQLiteVariadicBindParams): IterableIterator<T>;\n  public *getEachSync<T>(source: string, ...params: any[]): IterableIterator<T> {\n    const statement = this.prepareSync(source);\n    try {\n      const result = statement.executeSync<T>(...params);\n      for (const row of result) {\n        yield row;\n      }\n    } finally {\n      statement.finalizeSync();\n    }\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult.getAllSync()`](#getallsync), and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public getAllSync<T>(source: string, params: SQLiteBindParams): T[];\n  /**\n   * @hidden\n   */\n  public getAllSync<T>(source: string, ...params: SQLiteVariadicBindParams): T[];\n  public getAllSync<T>(source: string, ...params: any[]): T[] {\n    const statement = this.prepareSync(source);\n    let allRows;\n    try {\n      const result = statement.executeSync<T>(...params);\n      allRows = result.getAllSync();\n    } finally {\n      statement.finalizeSync();\n    }\n    return allRows;\n  }\n\n  //#endregion\n}\n\n/**\n * The default directory for SQLite databases.\n */\nexport const defaultDatabaseDirectory = ExpoSQLite.defaultDatabaseDirectory;\n\n/**\n * Open a database.\n *\n * @param databaseName The name of the database file to open.\n * @param options Open options.\n * @param directory The directory where the database file is located. The default value is `defaultDatabaseDirectory`.\n */\nexport async function openDatabaseAsync(\n  databaseName: string,\n  options?: SQLiteOpenOptions,\n  directory?: string\n): Promise<SQLiteDatabase> {\n  const openOptions = options ?? {};\n  const databasePath = createDatabasePath(databaseName, directory);\n  await ExpoSQLite.ensureDatabasePathExistsAsync(databasePath);\n  maybeWarnCRSQLiteDeprecation(options);\n  const nativeDatabase = new ExpoSQLite.NativeDatabase(databasePath, openOptions);\n  await nativeDatabase.initAsync();\n  return new SQLiteDatabase(databasePath, openOptions, nativeDatabase);\n}\n\n/**\n * Open a database.\n *\n * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n *\n * @param databaseName The name of the database file to open.\n * @param options Open options.\n * @param directory The directory where the database file is located. The default value is `defaultDatabaseDirectory`.\n */\nexport function openDatabaseSync(\n  databaseName: string,\n  options?: SQLiteOpenOptions,\n  directory?: string\n): SQLiteDatabase {\n  const openOptions = options ?? {};\n  const databasePath = createDatabasePath(databaseName, directory);\n  ExpoSQLite.ensureDatabasePathExistsSync(databasePath);\n  maybeWarnCRSQLiteDeprecation(options);\n  const nativeDatabase = new ExpoSQLite.NativeDatabase(databasePath, openOptions);\n  nativeDatabase.initSync();\n  return new SQLiteDatabase(databasePath, openOptions, nativeDatabase);\n}\n\n/**\n * Given a `Uint8Array` data and [deserialize to memory database](https://sqlite.org/c3ref/deserialize.html).\n *\n * @param serializedData The binary array to deserialize from [`SQLiteDatabase.serializeAsync()`](#serializeasyncdatabasename).\n * @param options Open options.\n */\nexport async function deserializeDatabaseAsync(\n  serializedData: Uint8Array,\n  options?: SQLiteOpenOptions\n): Promise<SQLiteDatabase> {\n  const openOptions = options ?? {};\n  maybeWarnCRSQLiteDeprecation(options);\n  const nativeDatabase = new ExpoSQLite.NativeDatabase(':memory:', openOptions, serializedData);\n  await nativeDatabase.initAsync();\n  return new SQLiteDatabase(':memory:', openOptions, nativeDatabase);\n}\n\n/**\n * Given a `Uint8Array` data and [deserialize to memory database](https://sqlite.org/c3ref/deserialize.html).\n *\n * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n *\n * @param serializedData The binary array to deserialize from [`SQLiteDatabase.serializeSync()`](#serializesyncdatabasename)\n * @param options Open options.\n */\nexport function deserializeDatabaseSync(\n  serializedData: Uint8Array,\n  options?: SQLiteOpenOptions\n): SQLiteDatabase {\n  const openOptions = options ?? {};\n  maybeWarnCRSQLiteDeprecation(options);\n  const nativeDatabase = new ExpoSQLite.NativeDatabase(':memory:', openOptions, serializedData);\n  nativeDatabase.initSync();\n  return new SQLiteDatabase(':memory:', openOptions, nativeDatabase);\n}\n\n/**\n * Delete a database file.\n *\n * @param databaseName The name of the database file to delete.\n * @param directory The directory where the database file is located. The default value is `defaultDatabaseDirectory`.\n */\nexport async function deleteDatabaseAsync(databaseName: string, directory?: string): Promise<void> {\n  const databasePath = createDatabasePath(databaseName, directory);\n  return await ExpoSQLite.deleteDatabaseAsync(databasePath);\n}\n\n/**\n * Delete a database file.\n *\n * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n *\n * @param databaseName The name of the database file to delete.\n * @param directory The directory where the database file is located. The default value is `defaultDatabaseDirectory`.\n */\nexport function deleteDatabaseSync(databaseName: string, directory?: string): void {\n  const databasePath = createDatabasePath(databaseName, directory);\n  return ExpoSQLite.deleteDatabaseSync(databasePath);\n}\n\n/**\n * The event payload for the listener of [`addDatabaseChangeListener`](#sqliteadddatabasechangelistenerlistener)\n */\nexport type DatabaseChangeEvent = {\n  /** The database name. The value would be `main` by default and other database names if you use `ATTACH DATABASE` statement. */\n  databaseName: string;\n\n  /** The absolute file path to the database. */\n  databaseFilePath: string;\n\n  /** The table name. */\n  tableName: string;\n\n  /** The changed row ID. */\n  rowId: number;\n};\n\n/**\n * Add a listener for database changes.\n * > Note: to enable this feature, you must set [`enableChangeListener` to `true`](#sqliteopenoptions) when opening the database.\n *\n * @param listener A function that receives the `databaseName`, `databaseFilePath`, `tableName` and `rowId` of the modified data.\n * @returns A `Subscription` object that you can call `remove()` on when you would like to unsubscribe the listener.\n */\nexport function addDatabaseChangeListener(\n  listener: (event: DatabaseChangeEvent) => void\n): EventSubscription {\n  return ExpoSQLite.addListener('onDatabaseChange', listener);\n}\n\n/**\n * A new connection specific used for [`withExclusiveTransactionAsync`](#withexclusivetransactionasynctask).\n * @hidden not going to pull all the database methods to the document.\n */\nclass Transaction extends SQLiteDatabase {\n  public static async createAsync(db: SQLiteDatabase): Promise<Transaction> {\n    const options = { ...db.options, useNewConnection: true };\n    maybeWarnCRSQLiteDeprecation(options);\n    const nativeDatabase = new ExpoSQLite.NativeDatabase(db.databasePath, options);\n    await nativeDatabase.initAsync();\n    return new Transaction(db.databasePath, options, nativeDatabase);\n  }\n}\n\n// TODO(kudo,20241017) - Remove `enableCRSQLite` in SDK 53.\nfunction maybeWarnCRSQLiteDeprecation(openOptions: SQLiteOpenOptions | undefined | null) {\n  const enableCRSQLite = openOptions?.enableCRSQLite === true;\n  if (!enableCRSQLite || __DEV__ !== true || memoWarnCRSQLiteDeprecation) {\n    return;\n  }\n  console.warn(\n    'CR-SQLite is no longer actively maintained. The experimental `enableCRSQLite` option is deprecated and will be removed in SDK 53.'\n  );\n  memoWarnCRSQLiteDeprecation = true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}